$Header: /cvsroot/druidbsd/druidbsd/druid83/dep/freebsd/patches/README,v 1.1 2012/10/10 23:30:00 devinteske Exp $

These patch files, when applied to the FreeBSD Operating System source-code,
will allow you to compile a custom version of sysinstall(8) and assemble a
custom implementation of the `mfsroot.gz' compressed boot-floppy image.

First, you need to check out an up-to-date FreeBSD source tree. This is done
using cvsup(1). Create a new file named "src-all.cvsup" with the following
file-contents:

	*default host=cvsup4.FreeBSD.org
	*default base=/var/db/freebsd
	*default prefix=/usr
	*default release=cvs tag=RELENG_8_3
	*default delete use-rel-suffix
	*default compress
	src-all

NOTE: You may need to manually create the directory `/var/db/freebsd'. This
      directory does not exist by default and cvsup will refuse to run unless
      it exists.

Once you've created `src-all.cvsup', you are now ready to use said-file with
the cvsup(1) utility to download the FreeBSD Operating System source-code for
modification and compiling. Execute the following command:

	cvsup src-all.cvsup

NOTE: You will need approximately 600MB of storage space available on the file-
      system that `/usr/src' resides on.

NOTE: If `/usr/src' is not writable by you, you may need to execute the above
      command with root-privileges (using sudo(8) for example).

Next, apply a small set of ``world'' patches:

	cat world_patches/*.patch | patch -Nd /usr/src

Now, we are ready to compile the core operating system bits. Execute the
following commands to perform the first-pass of compilation:

	cd /usr/src
	# If using csh or tcsh:
	env CFLAGS=-DDRUID make buildworld -DWITHOUT_OPENSSL \
		|& tee buildworld.log
	# Otherwise (sh/bash/others):
	env CFLAGS=-DDRUID make buildworld -DWITHOUT_OPENSSL \
		2>&1 | tee buildworld.log

NOTE: It is necessary to pass -DWITHOUT_OPENSSL to produce a static
      libarchive(3) free of OpenSSL dependencies. Otherwise, our mfsroot's copy
      of tar(1) will link against an OpenSSL-dependent `libarchive.a'. This is
      an area where crunchgen(1) is lacking -- the ability to compile libs with
      special buildopts like you can with programs. This inevitably results in
      relying on build(7) to produce the customized library later used in our
      mfsroot configuration `/usr/src/release/i386/boot_crunch.conf' rather
      than wholly containing all customizations to the release(7) process.

NOTE: You will need approximately 600MB of storage space available on the file-
      system that `/usr/obj' resides on.

If the build fails, you can find a comprehensive log in the `buildworld.log'
file in the current working directory (/usr/src).

NOTE: Running `make builworld ...' will cause the `/usr/obj' directory to be
      cleaned, deleting object files. If a build error occurs and you know how
      to correct it, you can resume the build where it left off by instead
      performing a `make buildworld ... NO_CLEAN=YES' using the following
      syntax:

	cd /usr/src
	# If using csh or tcsh:
	env CFLAGS=-DDRUID make buildworld -DWITHOUT_OPENSSL \
		NO_CLEAN=YES |& tee -a buildworld.log
	# Otherwise (sh/bash/others):
	env CFLAGS=-DDRUID make buildworld -DWITHOUT_OPENSSL \
		NO_CLEAN=YES 2>&1 | tee -a buildworld.log

Next, it's time to compile our custom release distribution (which can take
several hours).

To minimize the size of our final mfsroot image (the Druid boot image), we
must specify some build constraints to minimize link dependencies to the
crunchgen(1) `boot_crunch' configuration. This is done by adding flags to the
WORLD_FLAGS variable on the make(1) command-line when invoking any of the
`release' family of targets in `/usr/src/release/Makefile'. The options
specified in the WORLD_FLAGS variable (separated by spaces) are used by the
release build when performing a `make installworld' in the directory `/usr/src'
initially to link `/usr/obj' binaries and install a build environment to
`/usr/release' and used again later when performing a `make buildworld' in the
directory `/usr/release/usr/src' (a virgin copy of `/usr/src' with
LOCAL_PATCHES applied).

When you perform a full `make release' in `/usr/src/release', the following
occurs (in order) to compile the custom release:

- A suitable build-environment is assembled in `/usr/release' from the object-
  files previously compiled to `/usr/obj' (from the prior `buildworld'
  performed in `/usr/src').
- A fresh copy of the source tree (`/usr/src') is copied to the directory
  `/usr/release/usr/src'
- Local patches are applied (if specified with the LOCAL_PATCHES option)
- A chroot(8) is performed into the assembled build-environment at the
  directory `/usr/release'
- The source-tree within the build-environment (`/usr/release/usr/src') is
  compiled using any additional options previously specified in WORLD_FLAGS.

NOTE: This allows you to compile a release that is a different architecture
      than the one booted-from. To achieve cross-platform releases, the initial
      `buildworld' performed in `/usr/src' on the booted operating system ought
      to be a TARGET/TARGET_ARCH build to another platform, producing cross-
      platorm object-files in `/usr/obj' (which are in-turn installed to
      `/usr/release' and used to re-compile the source tree from within the
      chroot'ed environment that is native to the desired release architecture)
      though your running kernel must support executing the binary targets
      produced by the cross-platform build.

NOTE: For a full list of possible options available to WORLD_FLAGS, see
      src.conf(5).

Before we can build our custom release, some build-requirements need to be
copied to a globally-accessible place (we'll use `/tmp' but feel free to
deviate):

	cat local_patches/*.patch > /tmp/druid.patches
	cp local_script.sh /tmp/

Finally, execute the following commands (as root) to compile the FreeBSD
release.

	cd /usr/src/release
	# If using csh or tcsh:
	make release MAKE="/usr/bin/env CFLAGS=-DDRUID make" \
		CHROOTDIR=/usr/release EXTSRCDIR=/usr/src KERNELS_BASE= \
		NODOC=YES NO_FLOPPIES=YES NOCDROM=YES NOPORTS=YES \
		WORLD_FLAGS=-DWITHOUT_OPENSSL PATCH_FLAGS=-N \
		LOCAL_PATCHES=/tmp/druid.patches \
		LOCAL_SCRIPT=/tmp/local_script.sh |& tee release.log
	# Otherwise (sh/bash/others):
	make release MAKE="/usr/bin/env CFLAGS=-DDRUID make" \
		CHROOTDIR=/usr/release EXTSRCDIR=/usr/src KERNELS_BASE= \
		NODOC=YES NO_FLOPPIES=YES NOCDROM=YES NOPORTS=YES \
		WORLD_FLAGS=-DWITHOUT_OPENSSL PATCH_FLAGS=-N \
		LOCAL_PATCHES=/tmp/druid.patches \
		LOCAL_SCRIPT=/tmp/local_script.sh 2>&1 | tee release.log

NOTE: You will need approximately 3GB of storage space available on the file-
      system that `/usr/release' resides on.

NOTE: You need to execute the above command with root-privileges (using
      sudo(8) for example) because the release(7) process requires elevated
      privileges for various build/assembly procedures.

NOTE: Above you will see that we passed `-DWITHOUT_OPENSSL' (see src.conf(5))
      in the WORLD_FLAGS option of `make release' (see release(7)). This causes
      tar(1) to be compiled without SSL support, creating an executable that
      does not require linking against libcrypto/libssl (see crypto(3) and
      ssl(3)).

If the build fails, you can find a comprehensive log in the `release.log'
file in the current working directory (/usr/src/release).

WARNING! If `make release' fails during the LOCAL_PATCHES stage (see
         release(7)) and you choose to fixup the patches by-hand, you can
         safely transition to the `rerelease' stage [below] if-and-only-if you
         execute the following LOCAL_SCRIPT command (as root) before
         proceeding:

		/usr/bin/env CHROOTDIR=/usr/release /tmp/local_script.sh

         This is due to the fact that the release(7) process only executes the
         LOCAL_SCRIPT if the LOCAL_PATCHES apply cleanly. Unfortunately, the
         `rerelease' target does not support LOCAL_SCRIPT (hence why the
         LOCAL_SCRIPT must be executed by-hand before transitioning from a
         failed `release' target to the `rerelease' target).

NOTE: Running `make release ...' will cause the `/usr/release' directory to be
      erased and regenerated each time. If a build error occurs and you know
      how to correct it, you can resume the build where it left off by instead
      performing a `make rerelease ... RELEASENOUPDATE=YES' using the following
      syntax (notice the different target used, `rerelease' vs. `release', the
      the addition of `RELEASENOUPDATE=YES' to the end of the command, and the
      omission of LOCAL_PATCHES, LOCAL_SCRIPT, and PATCH_FLAGS):

	cd /usr/src/release
	# If using csh or tcsh:
	make rerelease MAKE="/usr/bin/env CFLAGS=-DDRUID make" \
		CHROOTDIR=/usr/release EXTSRCDIR=/usr/src KERNELS_BASE= \
		NODOC=YES NO_FLOPPIES=YES NOCDROM=YES NOPORTS=YES \
		WORLD_FLAGS=-DWITHOUT_OPENSSL RELEASENOUPDATE=YES \
		|& tee -a release.log
	# Otherwise (sh/bash/others):
	make rerelease MAKE="/usr/bin/env CFLAGS=-DDRUID make" \
		CHROOTDIR=/usr/release EXTSRCDIR=/usr/src KERNELS_BASE= \
		NODOC=YES NO_FLOPPIES=YES NOCDROM=YES NOPORTS=YES \
		WORLD_FLAGS=-DWITHOUT_OPENSSL RELEASENOUPDATE=YES \
		2>&1 | tee -a release.log

NOTE: After a successful build, if you need to recompile after making
      additional changes you can remove the files `release.4' and `release.8'
      in the directory `/usr/release/usr/obj/usr/src/release' and then re-run
      the `make rerelease' command (as illustrated above). However, make sure
      that your changes are made in the `/usr/release/usr/src' directory
      opposed to `/usr/src'.

When the release has successfully been built, you'll then have to pluck the
compiled MFS root image from `/usr/release/R/stage/mfsroot/mfsroot.gz' (which
contains [1] our patched sysinstall(8) binary and [2] some additional utilities
required by Druid (such as `/stand/sleep', `/stand/mount', `/stand/printf', and
`/stand/mount_cd9660') and copy it to the following places within the Druid
sources:

	druid/dep/freebsd/mfsroot/rescue/dep/mfsroot.gz
	druid/dep/freebsd/mfsroot/standard/dep/mfsroot.gz

Once copied to the appropriate location, you must then use the `make from_dep'
command in each of the following directories to create the final boot images
that will be incorporated into the Druid sources:

	druid/dep/freebsd/mfsroot/rescue
	druid/dep/freebsd/mfsroot/standard

The `make from_dep' command, when executed in each of the above directories
will produce a new `mfsroot.gz' file in the current working-directory. The
`README' file in each of those directories contains instructions for where to
place the newly-compiled `mfsroot.gz' file within the Druid sources.

The dependencies generated from this code/patch-set can ONLY be compiled on
FreeBSD. However, once the dependencies are generated and placed into the
`druid/src' directory, you can then compile the rest of the Druid on any
platform that meets these base requirements (also mentioned in the top-level
`doc/BUILD' file):

	- Can execute Bourne-shell scripts
	- Has GNU make installed
	- Has mkisofs installed
	- Has Perl installed (including the `Fcntl' and `bytes' modules)
	  	(unless `--disable-isohybrid' is passed to configure, disabling
		 the ability to write an ISO image compatible with USB stick)

